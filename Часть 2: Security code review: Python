Пример №2.1:
from flask import Flask, request
from jinja2 import Template

app = Flask(__name__)

@app.route("/page")
def page():
    name = request.values.get('name')  # Уязвимость: отсутствие экранирования пользовательского ввода
    age = request.values.get('age', 'unknown')
    output = Template('Hello ' + name + '! Your age is ' + age + '.').render()  # Уязвимость: потенциальная инъекция шаблонов Jinja2
    return output

if __name__ == "__main__":
    app.run(debug=True)

Указание строк с уязвимостями:
Строка 9: отсутствие экранирования пользовательского ввода (переменная `name`).
Строка 10: потенциальная инъекция шаблонов Jinja2 из-за конкатенации строк.

Последствия эксплуатации уязвимостей:
Отсутствие экранирования пользовательского ввода может привести к XSS-атакам (межсайтовый скриптинг).
Инъекция шаблонов Jinja2 может позволить злоумышленнику выполнить произвольный код на сервере, что может привести к компрометации приложения и утечке конфиденциальной информации.

Способы исправления уязвимостей:
Для предотвращения XSS-атак следует экранировать пользовательский ввод при его вставке в HTML-контекст или использовать функции безопасного рендеринга шаблонов.
Для предотвращения инъекции шаблонов Jinja2 рекомендуется использовать безопасные функции рендеринга шаблонов, такие как `render_template` в Flask, которые автоматически экранируют пользовательский ввод.

Выбор наилучшего способа исправления уязвимостей:
Использование безопасных функций рендеринга шаблонов, таких как `render_template`, является наилучшим подходом для предотвращения инъекции шаблонов Jinja2. Этот метод автоматически экранирует пользовательский ввод, предотвращая возможность выполнения произвольного кода.


Пример №2.2:
from flask import Flask, request
import subprocess

app = Flask(__name__)

@app.route("/dns")
def dns_lookup():
    hostname = request.values.get('hostname')  # Уязвимость: потенциальная командная инъекция
    cmd = 'nslookup ' + hostname
    output = subprocess.check_output(cmd, shell=True, text=True)  # Уязвимость: использование shell=True
    return output

if __name__ == "__main__":
    app.run(debug=True)

Указание строк с уязвимостями:
Строка 9: потенциальная командная инъекция из-за отсутствия экранирования пользовательского ввода (переменная `hostname`).
Строка 10: использование `shell=True`, что может представлять угрозу безопасности, поскольку это позволяет выполнению произвольных команд в операционной системе.

Последствия эксплуатации уязвимостей:
Потенциальная командная инъекция может позволить злоумышленнику выполнить произвольные команды в операционной системе, что может привести к компрометации сервера и утечке конфиденциальной информации.

Способы исправления уязвимостей:
Для предотвращения командной инъекции следует экранировать пользовательский ввод или использовать безопасные альтернативы, такие как использование модуля `subprocess` с передачей списка аргументов вместо строки команды.
Рекомендуется избегать использования `shell=True` и передавать команды в `subprocess` как список аргументов, что предотвратит возможность выполнения произвольных команд.

Выбор наилучшего способа исправления уязвимостей:
Использование списка аргументов вместо строки команды в `subprocess` и отсутствие `shell=True` являются более безопасными подходами для предотвращения командной инъекции. Этот метод предотвращает возможность выполнения произвольных команд и повышает безопасность приложения.
